import React, { useState, useEffect, useCallback } from "react";
import { toast } from "sonner";
import { useLocation, useNavigate, useParams } from "react-router-dom";
import axiosInstance from "@/lib/axios";
import { 
  Viewer,
  SpecialZoomLevel,
} from "@react-pdf-viewer/core";
import { scrollModePlugin } from '@react-pdf-viewer/scroll-mode';
import { pageNavigationPlugin } from '@react-pdf-viewer/page-navigation';
import { zoomPlugin } from '@react-pdf-viewer/zoom';
import { 
  ArrowLeft, 
  ArrowRight, 
  Menu, 
  X, 
  LogOut, 
  Check, 
  Maximize, 
  Minimize,
  ZoomIn,
  ZoomOut,
  Clock,
  FileText,
  Send,
  Pause
} from "lucide-react";
import * as RadioGroup from "@radix-ui/react-radio-group";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { useFullscreen } from "../../../hooks/useFullscreen";

interface Answer {
  question_number: number;
  answer: string;
}

interface Test {
  id: number;
  name: string;
  file: string;
  duration: number;
}

interface TestSession {
  id: number;
  test: number;
  user: number;
  start_time: string;
  end_time?: string;
}

const TestPageRedesigned: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const location = useLocation();
  const session: TestSession = location.state?.session;

  // State management
  const [test, setTest] = useState<Test | null>(null);
  const [answers, setAnswers] = useState<Record<number, string>>({});
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [timeLeft, setTimeLeft] = useState<number>(0);
  const [currentPage, setCurrentPage] = useState(0);
  const [totalPages, setTotalPages] = useState(0);
  const [maxQuestions] = useState(60); // این باید از بک‌اند بیاید
  const [gotoPage, setGotoPage] = useState("");

  // Dialog states
  const [confirmFinish, setConfirmFinish] = useState(false);
  const [confirmExit, setConfirmExit] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(true);

  // Fullscreen
  const { isFullscreen, toggleFullscreen } = useFullscreen();

  // PDF plugins
  const scrollModePluginInstance = scrollModePlugin();
  const pageNavigationPluginInstance = pageNavigationPlugin();
  const zoomPluginInstance = zoomPlugin();
  const { ZoomInButton, ZoomOutButton, ZoomPopover } = zoomPluginInstance;
  const { GoToNextPageButton, GoToPreviousPageButton } = pageNavigationPluginInstance;

  const options = [
    { value: "1", label: "۱" },
    { value: "2", label: "۲" },
    { value: "3", label: "۳" },
    { value: "4", label: "۴" },
  ];\n\n  // Load test data\n  useEffect(() => {\n    if (!session) {\n      toast.error("جلسه آزمون یافت نشد");\n      navigate(\"/panel/tests/\");\n      return;\n    }\n\n    axiosInstance\n      .get(`/tests/${id}/`)\n      .then((res) => {\n        setTest(res.data);\n        setTimeLeft(res.data.duration * 60);\n      })\n      .catch((err) => {\n        console.error("Error fetching test:", err);\n        setError("خطا در دریافت اطلاعات آزمون");\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n\n    // Prevent accidental page close\n    const handleBeforeUnload = (e: BeforeUnloadEvent) => {\n      e.preventDefault();\n      e.returnValue = "";\n      return "";\n    };\n\n    window.addEventListener("beforeunload", handleBeforeUnload);\n    return () => {\n      window.removeEventListener("beforeunload", handleBeforeUnload);\n    };\n  }, [id, navigate, session]);\n\n  // Timer countdown\n  useEffect(() => {\n    if (!test || timeLeft <= 0) return;\n\n    const timer = setInterval(() => {\n      setTimeLeft((prev) => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          handleAutoFinish();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [test, timeLeft]);\n\n  const handleAutoFinish = useCallback(async () => {\n    setIsSubmitting(true);\n    try {\n      await axiosInstance.post(`/sessions/${session.id}/finish/`);\n      toast.info("زمان آزمون به پایان رسید و پاسخ‌های شما ثبت شد");\n      navigate(\"/panel/tests/\");\n    } catch (error) {\n      console.error("Error auto-finishing test:", error);\n      toast.error("خطا در ثبت خودکار پاسخ‌ها");\n    }\n  }, [session, navigate]);\n\n  const handleFinishTest = useCallback(async () => {\n    setIsSubmitting(true);\n    try {\n      await axiosInstance.post(`/sessions/${session.id}/finish/`);\n      setConfirmFinish(false);\n      toast.success("آزمون با موفقیت به پایان رسید");\n      navigate(\"/panel/tests/\");\n    } catch (error) {\n      console.error("Error finishing test:", error);\n      toast.error("خطا در ثبت پاسخ‌ها. لطفا مجددا تلاش کنید.");\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [session, navigate]);\n\n  const handleAnswer = useCallback(\n    async (questionNumber: number, value: string) => {\n      const previousAnswer = answers[questionNumber];\n      const newAnswers = { ...answers, [questionNumber]: value };\n      setAnswers(newAnswers);\n\n      try {\n        await axiosInstance.post(\"/submit-answer/\", {\n          session_id: session.id,\n          question_number: questionNumber,\n          answer: value,\n        });\n      } catch (error) {\n        console.error("Error submitting answer:", error);\n        setAnswers((prev) => ({ ...prev, [questionNumber]: previousAnswer }));\n        toast.error(`خطا در ثبت پاسخ سوال ${questionNumber}`);\n      }\n    },\n    [answers, session.id]\n  );\n\n  const formatTime = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const remainingSeconds = seconds % 60;\n    return `${hours > 0 ? `${hours}:` : \"\"}${minutes\n      .toString()\n      .padStart(2, \"0\")}:${remainingSeconds.toString().padStart(2, \"0\")}`;\n  };\n\n  const getTimeColor = () => {\n    if (timeLeft < 300) return \"text-red-500\";\n    if (timeLeft < 600) return \"text-orange-500\";\n    return \"text-green-500\";\n  };\n\n  const handleGoToPage = () => {\n    const pageNum = parseInt(gotoPage);\n    if (pageNum >= 1 && pageNum <= totalPages) {\n      setCurrentPage(pageNum - 1);\n      setGotoPage(\"\");\n    } else {\n      toast.error(`شماره صفحه باید بین 1 و ${totalPages} باشد`);\n    }\n  };\n\n  const answeredCount = Object.keys(answers).length;\n  const progressPercentage = (answeredCount / maxQuestions) * 100;\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-muted-foreground\">در حال بارگیری آزمون...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !test) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <FileText className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n          <h3 className=\"mt-4 text-lg font-semibold\">خطا در بارگیری آزمون</h3>\n          <p className=\"mb-6 text-gray-600 dark:text-gray-300\">{error}</p>\n          <Button onClick={() => navigate(\"/panel/tests\")}>\n            بازگشت به لیست آزمون‌ها\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col h-screen overflow-hidden bg-gray-50 dark:bg-gray-900\">\n      {/* Confirmation Dialogs */}\n      <Dialog open={confirmFinish} onOpenChange={setConfirmFinish}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Send className=\"h-5 w-5\" />\n              اتمام آزمون\n            </DialogTitle>\n            <DialogDescription>\n              آیا از اتمام آزمون و ثبت پاسخ‌های خود اطمینان دارید؟\n              <div className=\"mt-2 p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>پاسخ داده شده:</span>\n                  <span className=\"font-mono\">{answeredCount} از {maxQuestions}</span>\n                </div>\n                <Progress value={progressPercentage} className=\"mt-2 h-2\" />\n              </div>\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setConfirmFinish(false)}\n              disabled={isSubmitting}\n            >\n              ادامه آزمون\n            </Button>\n            <Button onClick={handleFinishTest} disabled={isSubmitting}>\n              {isSubmitting ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  در حال ثبت...\n                </>\n              ) : (\n                <>\n                  <Check className=\"mr-2 h-4 w-4\" />\n                  بله، آزمون را به پایان برسان\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={confirmExit} onOpenChange={setConfirmExit}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Pause className=\"h-5 w-5\" />\n              خروج موقت از آزمون\n            </DialogTitle>\n            <DialogDescription>\n              آیا می‌خواهید موقتاً از آزمون خارج شوید؟ پاسخ‌های شما ذخیره شده و می‌توانید\n              بعداً ادامه دهید.\n              <div className=\"mt-2 text-xs text-muted-foreground\">\n                ⚠️ توجه: زمان آزمون همچنان ادامه پیدا می‌کند\n              </div>\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setConfirmExit(false)}>\n              ماندن در آزمون\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={() => {\n                setConfirmExit(false);\n                navigate(\"/panel/tests/\");\n              }}\n            >\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              خروج موقت\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Top Navigation Bar */}\n      <div className=\"bg-white dark:bg-gray-800 border-b shadow-sm px-4 py-2\">\n        <div className=\"flex items-center justify-between\">\n          {/* Left side - Test info and timer */}\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setSidebarOpen(!sidebarOpen)}\n            >\n              {sidebarOpen ? <X className=\"h-4 w-4\" /> : <Menu className=\"h-4 w-4\" />}\n            </Button>\n            \n            <div className=\"flex items-center gap-2\">\n              <FileText className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"font-medium text-sm\">{test.name}</span>\n            </div>\n            \n            <div className=\"flex items-center gap-2 bg-gray-100 dark:bg-gray-700 px-3 py-1 rounded-lg\">\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n              <span className={`font-mono font-bold ${getTimeColor()}`}>\n                {formatTime(timeLeft)}\n              </span>\n            </div>\n          </div>\n\n          {/* Center - PDF Controls */}\n          <div className=\"flex items-center gap-2\">\n            <TooltipProvider>\n              <div className=\"flex items-center gap-1 bg-gray-100 dark:bg-gray-700 rounded-lg p-1\">\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <div>\n                      <GoToPreviousPageButton>\n                        {(props) => (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={props.onClick}\n                            disabled={!props.isDisabled ? false : true}\n                          >\n                            <ArrowRight className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </GoToPreviousPageButton>\n                    </div>\n                  </TooltipTrigger>\n                  <TooltipContent>صفحه قبل</TooltipContent>\n                </Tooltip>\n\n                <div className=\"flex items-center gap-2 px-2\">\n                  <Input\n                    type=\"number\"\n                    value={gotoPage}\n                    onChange={(e) => setGotoPage(e.target.value)}\n                    onKeyPress={(e) => e.key === \"Enter\" && handleGoToPage()}\n                    placeholder={`${currentPage + 1}`}\n                    className=\"w-16 h-8 text-center text-xs\"\n                    min=\"1\"\n                    max={totalPages}\n                  />\n                  <span className=\"text-xs text-muted-foreground\">از {totalPages}</span>\n                  {gotoPage && (\n                    <Button size=\"sm\" variant=\"ghost\" onClick={handleGoToPage}>\n                      برو\n                    </Button>\n                  )}\n                </div>\n\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <div>\n                      <GoToNextPageButton>\n                        {(props) => (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={props.onClick}\n                            disabled={!props.isDisabled ? false : true}\n                          >\n                            <ArrowLeft className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </GoToNextPageButton>\n                    </div>\n                  </TooltipTrigger>\n                  <TooltipContent>صفحه بعد</TooltipContent>\n                </Tooltip>\n              </div>\n\n              <div className=\"flex items-center gap-1 bg-gray-100 dark:bg-gray-700 rounded-lg p-1\">\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <ZoomOutButton>\n                      {(props) => (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={props.onClick}\n                        >\n                          <ZoomOut className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                    </ZoomOutButton>\n                  </TooltipTrigger>\n                  <TooltipContent>کوچک‌نمایی</TooltipContent>\n                </Tooltip>\n\n                <ZoomPopover />\n\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <ZoomInButton>\n                      {(props) => (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={props.onClick}\n                        >\n                          <ZoomIn className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                    </ZoomInButton>\n                  </TooltipTrigger>\n                  <TooltipContent>بزرگ‌نمایی</TooltipContent>\n                </Tooltip>\n              </div>\n            </TooltipProvider>\n          </div>\n\n          {/* Right side - Action buttons */}\n          <div className=\"flex items-center gap-2\">\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={toggleFullscreen}\n                >\n                  {isFullscreen ? (\n                    <Minimize className=\"h-4 w-4\" />\n                  ) : (\n                    <Maximize className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                {isFullscreen ? \"خروج از تمام صفحه\" : \"تمام صفحه\"}\n              </TooltipContent>\n            </Tooltip>\n\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setConfirmExit(true)}\n            >\n              <Pause className=\"h-4 w-4 mr-1\" />\n              خروج موقت\n            </Button>\n\n            <Button\n              size=\"sm\"\n              onClick={() => setConfirmFinish(true)}\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              <Send className=\"h-4 w-4 mr-1\" />\n              اتمام آزمون\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Answer Sheet Sidebar */}\n        <div\n          className={`bg-white dark:bg-gray-800 border-r shadow-lg transition-all duration-300 flex flex-col ${\n            sidebarOpen ? \"w-80\" : \"w-0\"\n          } overflow-hidden`}\n        >\n          {sidebarOpen && (\n            <>\n              {/* Progress Header */}\n              <div className=\"p-4 border-b bg-blue-50 dark:bg-blue-950/20\">\n                <div className=\"flex justify-between items-center mb-3\">\n                  <h3 className=\"font-semibold text-lg\">پاسخ‌برگ</h3>\n                  <Badge variant=\"secondary\" className=\"font-mono\">\n                    {answeredCount}/{maxQuestions}\n                  </Badge>\n                </div>\n                <Progress value={progressPercentage} className=\"h-2\" />\n                <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n                  <span>پیشرفت شما</span>\n                  <span>{Math.round(progressPercentage)}%</span>\n                </div>\n              </div>\n\n              {/* Answer Grid */}\n              <div className=\"flex-1 overflow-auto p-4\">\n                <div className=\"space-y-4\">\n                  {Array.from({ length: Math.ceil(maxQuestions / 10) }).map((_, columnIndex) => (\n                    <div key={columnIndex} className=\"\">\n                      <h4 className=\"text-sm font-medium text-muted-foreground mb-2 pb-1 border-b\">\n                        سوالات {columnIndex * 10 + 1} - {Math.min((columnIndex + 1) * 10, maxQuestions)}\n                      </h4>\n                      <div className=\"space-y-2\">\n                        {Array.from({ length: 10 }).map((_, rowIndex) => {\n                          const questionNumber = columnIndex * 10 + rowIndex + 1;\n                          if (questionNumber > maxQuestions) return null;\n                          \n                          const isAnswered = !!answers[questionNumber];\n                          const currentAnswer = answers[questionNumber];\n                          \n                          return (\n                            <div\n                              key={questionNumber}\n                              className={`p-2 rounded-lg border transition-all ${\n                                isAnswered\n                                  ? \"border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-950/20\"\n                                  : \"border-gray-200 bg-gray-50 dark:border-gray-700 dark:bg-gray-800\"\n                              }`}\n                            >\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <span className=\"text-sm font-medium\">\n                                  سوال {questionNumber}\n                                </span>\n                                {isAnswered && (\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    {currentAnswer}\n                                  </Badge>\n                                )}\n                              </div>\n                              \n                              <RadioGroup.Root\n                                value={answers[questionNumber] || \"\"}\n                                className=\"grid grid-cols-4 gap-1\"\n                              >\n                                {options.map((option) => (\n                                  <RadioGroup.Item\n                                    key={option.value}\n                                    value={option.value}\n                                    onMouseDown={() =>\n                                      handleAnswer(questionNumber, option.value)\n                                    }\n                                    className=\"h-8 flex items-center justify-center text-xs border rounded transition-all hover:bg-gray-100 dark:hover:bg-gray-700 data-[state=checked]:bg-blue-600 data-[state=checked]:text-white data-[state=checked]:border-blue-600 cursor-pointer\"\n                                  >\n                                    {option.label}\n                                  </RadioGroup.Item>\n                                ))}\n                              </RadioGroup.Root>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n\n        {/* PDF Viewer */}\n        <div className=\"flex-1 bg-gray-100 dark:bg-gray-700\">\n          {test.file && (\n            <Viewer\n              fileUrl={test.file}\n              plugins={[\n                scrollModePluginInstance,\n                pageNavigationPluginInstance,\n                zoomPluginInstance,\n              ]}\n              defaultScale={SpecialZoomLevel.PageFit}\n              onDocumentLoad={(e) => {\n                setTotalPages(e.doc.numPages);\n              }}\n              onPageChange={(e) => {\n                setCurrentPage(e.currentPage);\n              }}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TestPageRedesigned;"
